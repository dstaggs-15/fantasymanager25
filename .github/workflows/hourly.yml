name: Hourly Data Build

on:
  workflow_dispatch:     # click-to-run button
  schedule:
    - cron: '9 * * * *'  # hourly at :09
  push:
    paths:
      - 'pipeline/**'
      - 'docs/**'
      - '.github/workflows/hourly.yml'

permissions:
  contents: write

concurrency:
  group: hourly-build
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 25
    env:
      LEAGUE_ID: ${{ vars.LEAGUE_ID || '508419792' }}
      PLAYWRIGHT_BROWSERS_PATH: ${{ vars.PLAYWRIGHT_BROWSERS_PATH || '/home/ghrunner/.cache/ms-playwright' }}
      PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS: ${{ vars.PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS || '1' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install --upgrade playwright cloudscraper requests pydantic

      - name: Ensure Chromium (no sudo)
        run: |
          python -m playwright install chromium || true

      - name: Drop-in Playwright cookie fetcher
        run: |
          mkdir -p pipeline
          cat > pipeline/get_espn_cookies.py <<'PY'
          #!/usr/bin/env python3
          import argparse, os, sys, time
          from pathlib import Path
          from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout

          def write_env(path, kv):
            with open(path, "a", encoding="utf-8") as f:
              for k, v in kv.items(): f.write(f"{k}={v}\n")

          def main():
            ap = argparse.ArgumentParser()
            ap.add_argument("--league", required=True)
            ap.add_argument("--write-github-env", required=True)
            args = ap.parse_args()

            user = os.getenv("ESPN_USER", "").strip()
            pwd  = os.getenv("ESPN_PASS", "").strip()
            if not user or not pwd:
              print("ESPN_USER/ESPN_PASS env vars are required", file=sys.stderr)
              sys.exit(2)

            login_url  = "https://www.espn.com/login/"
            league_hub = f"https://fantasy.espn.com/football/league?leagueId={args.league}"
            artifacts  = os.getenv("ARTIFACTS_DIR")
            if artifacts: Path(artifacts).mkdir(parents=True, exist_ok=True)

            os.environ.setdefault("PLAYWRIGHT_BROWSERS_PATH",
                                  str(Path.home() / ".cache" / "ms-playwright"))

            with sync_playwright() as p:
              browser = p.chromium.launch(
                headless=True,
                args=["--disable-blink-features=AutomationControlled","--no-sandbox","--disable-dev-shm-usage"]
              )
              ctx = browser.new_context(
                viewport={"width":1366,"height":768},
                user_agent=("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                            "(KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"),
                locale="en-US",
              )
              ctx.add_init_script("Object.defineProperty(navigator,'webdriver',{get:()=>undefined});")
              page = ctx.new_page()

              # warm up
              page.goto(league_hub, wait_until="domcontentloaded")
              page.goto(login_url,  wait_until="domcontentloaded")

              # ESPN login lives inside an iframe titled "Sign in"
              try:
                frame = page.frame_locator("iframe[title='Sign in']")
                # primary locators
                user_input = frame.get_by_placeholder("Username or Email Address")
                pass_input = frame.get_by_placeholder("Password (case sensitive)")
                user_input.wait_for(timeout=20000); pass_input.wait_for(timeout=20000)
              except PWTimeout:
                # fallbacks
                try:
                  frame = page.frame_locator("iframe[title='Sign in']")
                  user_input = frame.locator("input[name='username'],input[type='email']").first
                  pass_input = frame.locator("input[name='password'],input[type='password']").first
                  user_input.wait_for(timeout=10000); pass_input.wait_for(timeout=10000)
                except PWTimeout:
                  if artifacts: page.screenshot(path=f"{artifacts}/fields_timeout.png", full_page=True)
                  print("Could not locate login fields", file=sys.stderr); sys.exit(2)

              user_input.fill(user)
              pass_input.fill(pwd)
              frame.get_by_role("button", name="Log In").click()

              swid, s2 = None, None
              deadline = time.time() + 25
              while time.time() < deadline and (not swid or not s2):
                for c in ctx.cookies():
                  n = c["name"].upper()
                  if n == "SWID": swid = c["value"]
                  if n in ("ESPN_S2","ESPN_s2","ESPNS2"): s2 = c["value"]
                time.sleep(1)

              if artifacts: page.screenshot(path=f"{artifacts}/post_login.png", full_page=True)
              if not swid or not s2:
                print("Failed to retrieve SWID/espn_s2 cookies from ESPN after login", file=sys.stderr)
                sys.exit(2)

              write_env(args.write_github_env, {"ESPN_SWID": swid, "ESPN_S2": s2, "SWID": swid})
              print("Got cookies. âœ…")
              ctx.close(); browser.close()

          if __name__ == "__main__":
            sys.exit(main())
          PY
          chmod +x pipeline/get_espn_cookies.py

      - name: Prefer cookie secrets if present
        if: ${{ secrets.ESPN_SWID != '' && secrets.ESPN_S2 != '' }}
        run: |
          echo "ESPN_SWID=${{ secrets.ESPN_SWID }}" >> "$GITHUB_ENV"
          echo "ESPN_S2=${{ secrets.ESPN_S2 }}"   >> "$GITHUB_ENV"
          echo "SWID=${{ secrets.ESPN_SWID }}"    >> "$GITHUB_ENV"

      - name: Login to ESPN to get cookies (Playwright)
        if: ${{ secrets.ESPN_SWID == '' || secrets.ESPN_S2 == '' }}
        env:
          ESPN_USER: ${{ secrets.ESPN_USER }}
          ESPN_PASS: ${{ secrets.ESPN_PASS }}
          ARTIFACTS_DIR: artifacts
        run: |
          mkdir -p artifacts
          python pipeline/get_espn_cookies.py --league "${LEAGUE_ID}" --write-github-env "$GITHUB_ENV"

      - name: Verify cookies
        run: |
          : "${ESPN_S2:?ESPN_S2 missing}"
          : "${SWID:?SWID missing}"
          echo "Cookies present."

      - name: Fetch players
        env: { SWID: ${{ env.SWID }}, ESPN_S2: ${{ env.ESPN_S2 }} }
        run: python pipeline/fetch_players.py

      - name: Fetch league
        env: { SWID: ${{ env.SWID }}, ESPN_S2: ${{ env.ESPN_S2 }} }
        run: python pipeline/fetch_league.py

      - name: Fetch rosters
        env: { SWID: ${{ env.SWID }}, ESPN_S2: ${{ env.ESPN_S2 }} }
        run: python pipeline/fetch_rosters.py

      - name: Commit JSON updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "robot: refresh ${{ env.LEAGUE_ID }}"
          file_pattern: docs/data/*.json

      - name: Upload login screenshots (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-login
          path: artifacts
          if-no-files-found: ignore
